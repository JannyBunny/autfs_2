package hsfulda.bachelor.javacc.test;
/* HilferufParser.java */
/* Generated By:JavaCC: Do not edit this line. HilferufParser.java */
public class HilferufParser implements HilferufParserConstants {

  public static void main(String args[]) throws ParseException {
    System.out.println("Beenden Sie die Eingabe durch Return und dann Ctrl-Z (Windows) bzw. Ctrl-D (Unix):");
    HilferufParser parser = new HilferufParser(System.in);
    parser.Input();
  }

  static final public void Input() throws ParseException {
    trace_call("Input");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case B:
        case C:
        case D:
        case E:
        case F:
        case G:
        case H:
        case I:
        case J:
        case K:
        case L:
        case M:
        case P:
        case Q:
        case R:
        case T:
        case U:
        case V:
        case X:
        case Y:
        case Z:
        case N:
        case O:
        case S:
        case W:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:{
          jj_consume_token(A);
          break;
          }
        case B:{
          jj_consume_token(B);
          break;
          }
        case C:{
          jj_consume_token(C);
          break;
          }
        case D:{
          jj_consume_token(D);
          break;
          }
        case E:{
          jj_consume_token(E);
          break;
          }
        case F:{
          jj_consume_token(F);
          break;
          }
        case G:{
          jj_consume_token(G);
          break;
          }
        case H:{
          jj_consume_token(H);
          break;
          }
        case I:{
          jj_consume_token(I);
          break;
          }
        case J:{
          jj_consume_token(J);
          break;
          }
        case K:{
          jj_consume_token(K);
          break;
          }
        case L:{
          jj_consume_token(L);
          break;
          }
        case M:{
          jj_consume_token(M);
          break;
          }
        case N:{
          jj_consume_token(N);
          break;
          }
        case O:{
          jj_consume_token(O);
          break;
          }
        case P:{
          jj_consume_token(P);
          break;
          }
        case Q:{
          jj_consume_token(Q);
          break;
          }
        case R:{
          jj_consume_token(R);
          break;
          }
        case S:{
          jj_consume_token(S);
          break;
          }
        case T:{
          jj_consume_token(T);
          break;
          }
        case U:{
          jj_consume_token(U);
          break;
          }
        case V:{
          jj_consume_token(V);
          break;
          }
        case W:{
          jj_consume_token(W);
          break;
          }
        case X:{
          jj_consume_token(X);
          break;
          }
        case Y:{
          jj_consume_token(Y);
          break;
          }
        case Z:{
          jj_consume_token(Z);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 36:
      case 37:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 36:{
          jj_consume_token(36);
          break;
          }
        case 37:{
          jj_consume_token(37);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(ZAHLGRAD);
      jj_consume_token(MINPUNKTSEK);
      jj_consume_token(36);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S:{
        jj_consume_token(S);
        break;
        }
      case N:{
        jj_consume_token(N);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZAHLGRAD:{
        jj_consume_token(ZAHLGRAD);
        break;
        }
      case ZAHLGRADBREITE:{
        jj_consume_token(ZAHLGRADBREITE);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MINPUNKTSEK);
      jj_consume_token(36);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O:{
        jj_consume_token(O);
        break;
        }
      case W:{
        jj_consume_token(W);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(36);
      ES();
      jj_consume_token(36);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case B:
        case C:
        case D:
        case E:
        case F:
        case G:
        case H:
        case I:
        case J:
        case K:
        case L:
        case M:
        case P:
        case Q:
        case R:
        case T:
        case U:
        case V:
        case X:
        case Y:
        case Z:
        case N:
        case O:
        case S:
        case W:
        case 36:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:{
          jj_consume_token(A);
          break;
          }
        case B:{
          jj_consume_token(B);
          break;
          }
        case C:{
          jj_consume_token(C);
          break;
          }
        case D:{
          jj_consume_token(D);
          break;
          }
        case E:{
          jj_consume_token(E);
          break;
          }
        case F:{
          jj_consume_token(F);
          break;
          }
        case G:{
          jj_consume_token(G);
          break;
          }
        case H:{
          jj_consume_token(H);
          break;
          }
        case I:{
          jj_consume_token(I);
          break;
          }
        case J:{
          jj_consume_token(J);
          break;
          }
        case K:{
          jj_consume_token(K);
          break;
          }
        case L:{
          jj_consume_token(L);
          break;
          }
        case M:{
          jj_consume_token(M);
          break;
          }
        case N:{
          jj_consume_token(N);
          break;
          }
        case O:{
          jj_consume_token(O);
          break;
          }
        case P:{
          jj_consume_token(P);
          break;
          }
        case Q:{
          jj_consume_token(Q);
          break;
          }
        case R:{
          jj_consume_token(R);
          break;
          }
        case S:{
          jj_consume_token(S);
          break;
          }
        case T:{
          jj_consume_token(T);
          break;
          }
        case U:{
          jj_consume_token(U);
          break;
          }
        case V:{
          jj_consume_token(V);
          break;
          }
        case W:{
          jj_consume_token(W);
          break;
          }
        case X:{
          jj_consume_token(X);
          break;
          }
        case Y:{
          jj_consume_token(Y);
          break;
          }
        case Z:{
          jj_consume_token(Z);
          break;
          }
        case 36:{
          jj_consume_token(36);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    } finally {
      trace_return("Input");
    }
  }

  static final public void ES() throws ParseException {
    trace_call("ES");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S:{
        jj_consume_token(S);
        ES();
        jj_consume_token(S);
        break;
        }
      case SOS:{
        jj_consume_token(SOS);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ES");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HilferufParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7fffffe0,0x7fffffe0,0x0,0x0,0x28000000,0x80000000,0x50000000,0x7fffffe0,0x7fffffe0,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x30,0x30,0x0,0x1,0x0,0x10,0x10,0x4,};
   }

  /** Constructor with InputStream. */
  public HilferufParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HilferufParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HilferufParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public HilferufParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HilferufParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public HilferufParser(HilferufParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HilferufParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
