options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}
 
PARSER_BEGIN(Example)
 
public class Example {
 
  public static void main(String args[]) throws ParseException {
    System.out.println("Beenden Sie die Eingabe durch Return und dann Ctrl-Z (Windows) bzw. Ctrl-D (Unix):");
    Example parser = new Example(System.in);
    parser.Input();
  }
 
}
 
PARSER_END(Example)
 
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}
 
<DEFAULT> MORE : 
{ 
    <LATITUDE>: BREIT
|   <WRONG> : ERR
|    <HASH> : RAUTE  
}
 
<ERR> MORE:
{
    <RIGHT>: ERR
|    <WRONG>: ERR
|    <HASH>: DEFAULT
}
<RAUTE> MORE:
{
    <RIGHT>: RAUTE
|    <WRONG>: RAUTE
|    <HASH>: DEFAULT
}
 
<BREIT> MORE:
{
    <LONGITUDE>: LAENG
|    <WRONG>: ERR
|    <HASH>: DEFAULT
}
 
<LAENG> MORE:
{
    <LONGITUDE>: RAUTE
|    <WRONG>: ERR
|    <HASH>: SOSCHEIß
}
 
 
<END> MORE :
{
  "a" : End
| "b" : End 
}
 
 
<END> TOKEN :
{
  <Wort : "."> : DEFAULT
}
<WRONG> TOKEN :
{
<A : "._#">     
|<B : "_...#"> 
|<C : "_._.#"> 
|<D : "_..#"> 
|<E : ".#"> 
|<F : ".._.#"> 
|<G : "__.#"> 
|<H : "....#"> 
|<I : "..#"> 
|<J : ".___#"> 
|<K : "_._#"> 
|<L : "._..#"> 
|<M : "__#"> 
|<P : ".__.#"> 
|<Q : "__._#"> 
|<R : "._.#"> 
|<T : "_#"> 
|<U : ".._#"> 
|<V : "..._#"> 
|<X : "_..._#"> 
|<Y : "_.__#">
|<Z : "__..#"> 
}
<RIGHT> TOKEN :
{
<N : "_.#"> 
|<O : "___#"> 
|<S : "...#"> 
|<W : ".__#">
|<HASH: "#"> 
|<LATITUDE: ^(?:90(?:(?:\°0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\°[0-9]{1,2}\.[0-9]{1,3})?)\#)$ >
|<LONGITUDE: ^(?:180(?:(?:\°0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\°[0-9]{1,2}\.[0-9]{1,3})?)\#)$>
}
 
void Input() :
{}
{
  ((<Latitude><S|N><Longitude><O|W>)((<S>{n})<O>(<S>{n}))) <EOF>
}
 
